Linked list cycle II
i.e. return the starting position of the cycle present in the linkedlist 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head==NULL || (head->next==NULL)) // ekta element list e thakle return null
            return NULL;
        // using slow and fast pointer
        ListNode* slow = head;
         ListNode* fast = head;
        
        while(fast!=NULL && fast->next!=NULL){  // je pointer/mal ta jore dourache setake condition e use kora better
            slow=slow->next;
            fast=fast->next->next;
            
            if(slow==fast)   // cycle ache jodi if condition ta mele
                break;
            
        }

        if(slow!=fast)   // list e cycle na thakle return null
        return NULL;


        ListNode* p = head;   // aar ekta pointer nicchi p head/start e point korche

        while(p!=slow){
            p=p->next;
            slow=slow->next;
        }

        return p;




        
        
        
    }
};
